// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AuthUser {
    id            String        @id @unique @default(cuid())
    username      String?
    email         String?       @unique
    profile       UserProfile?
    geouser       GeoUser?
    created_at    DateTime?     @default(now())
    updated_at    DateTime?     @updatedAt
    primary_lang  String?
    theme         String?
    followers_cnt Int           @default(0)
    following_cnt Int           @default(0)
    posts         Post[]
    comments      Comment[]
    geo_posts     Geo_Post[]
    geo_comments  Geo_Comment[]
    likes         Like[]
    follows       AuthUser[]    @relation("UserFollows")
    followers     AuthUser[]    @relation("UserFollows")
    blocked_users AuthUser[]    @relation("UserBlocks")
    blocked_by    AuthUser[]    @relation("UserBlocks")
    notifications NotifyUser[]
    chats         Chat[]
    Geo_Like      Geo_Like[]
    Message       Message[]

    auth_session AuthSession[]
    auth_key     AuthKey[]

    @@index(fields: [id])
    @@map("auth_user")
}

model GeoUser {
    id               String                                @id @unique @default(cuid())
    userid           String                                @unique
    primary_location Unsupported("geometry(Point, 4326)")?
    lat              Float?
    lng              Float?
    country          String?
    city             String?
    county           String?
    state            String?
    user             AuthUser                              @relation(fields: [userid], references: [id])

    @@index(fields: [userid])
    @@map("geo_user")
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model UserProfile {
    profileid String   @id @default(cuid())
    userid    String   @unique
    username  String   @default("user")
    theme     String?  @default("light")
    bio       String?
    work      String?
    education String?
    avatar    String?
    cover     String?
    user      AuthUser @relation(fields: [userid], references: [id])

    @@index(fields: [userid], type: Hash)
    @@map("user_profile")
}

model Post {
    postid            String              @id @default(cuid())
    userid            String
    created_at        DateTime            @default(now())
    updated_at        DateTime            @updatedAt
    title             String
    content           String
    meta              Json?
    likes_cnt         Int                 @default(0)
    comment_cnt       Int                 @default(0)
    tags              String[]
    likes             Like[]
    comments          Comment[]
    user              AuthUser            @relation(fields: [userid], references: [id])
    Post_Notification Post_Notification[]

    @@unique([created_at, postid])
    @@unique([updated_at, postid])
    @@index(fields: [userid, postid])
    @@map("post")
}

model Comment {
    commentid  String   @id @default(cuid())
    userid     String
    postid     String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    title      String
    content    String
    likes_cnt  Int      @default(0)
    meta       Json?
    user       AuthUser @relation(fields: [userid], references: [id])
    post       Post     @relation(fields: [postid], references: [postid])
    likes      Like[]

    @@index(fields: [commentid, postid, userid])
    @@map("comment")
}

model Geo_Post {
    postid                String                                @id @default(cuid())
    userid                String
    type                  String
    geo_location          Unsupported("geometry(Point, 4326)")?
    created_at            DateTime                              @default(now())
    updated_at            DateTime?                             @updatedAt
    created_at_postid_raw String                                @unique
    timestamp             BigInt
    title                 String?
    content               String
    meta                  Json?
    likes_cnt             Int                                   @default(0)
    comment_cnt           Int                                   @default(0)
    likes                 Geo_Like[]
    comments              Geo_Comment[]
    user                  AuthUser                              @relation(fields: [userid], references: [id])

    @@unique([created_at, postid])
    @@unique([updated_at, postid])
    @@index([geo_location], name: "location_idx", type: Gist)
    @@index(fields: [userid], type: Hash)
    @@map("geo_post")
}

model Geo_Comment {
    commentid  String     @id @default(cuid())
    userid     String
    postid     String
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    title      String
    content    String
    meta       Json
    likes_cnt  Int        @default(0)
    likes      Geo_Like[]
    user       AuthUser   @relation(fields: [userid], references: [id])
    post       Geo_Post   @relation(fields: [postid], references: [postid])

    @@index(fields: [postid, userid])
    @@map("geo_comment")
}

model Like {
    likeid        String   @id @default(cuid())
    userid        String
    postid_userid String?  @unique
    postid        String?
    commentid     String?
    geo_commentid String?
    user          AuthUser @relation(fields: [userid], references: [id])
    post          Post?    @relation(fields: [postid], references: [postid])
    comment       Comment? @relation(fields: [commentid], references: [commentid])

    @@index(fields: [likeid, postid, userid, commentid])
    @@map("like")
}

model Geo_Like {
    likeid         String       @id @default(cuid())
    userid         String
    postid         String?
    postid_userid  String?      @unique
    commentid      String?
    user           AuthUser     @relation(fields: [userid], references: [id])
    comment        Geo_Comment? @relation(fields: [commentid], references: [commentid])
    Geo_Post       Geo_Post?    @relation(fields: [geo_PostPostid], references: [postid])
    geo_PostPostid String?

    @@index(fields: [likeid, postid, userid, commentid])
    @@map("geo_like")
}

model Chat {
    chatid      String     @id @default(cuid())
    chatmembers AuthUser[]
    userchatid  String?
    created_at  DateTime   @default(now())
    updated_at  DateTime   @updatedAt
    messages    Message[]

    @@index(fields: [userchatid])
    @@map("chat")
}

model Message {
    messageid  String   @id @default(cuid())
    chatid     String
    userid     String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    content    String
    viewed     Boolean  @default(false)
    chat       Chat[]
    user       AuthUser @relation(fields: [userid], references: [id])

    @@index(fields: [messageid, chatid, userid])
    @@map("message")
}

model Post_Notification {
    notificationid String       @id @default(cuid())
    userid         String?
    postid         String
    content        String
    post           Post         @relation(fields: [postid], references: [postid])
    notify_user    NotifyUser[]

    @@index(fields: [notificationid])
    @@map("post_notification")
}

model NotifyUser {
    nofiy_user_id String             @id @default(cuid())
    userid        String
    type          String?
    relativeId    String?
    content       String
    viewed        Boolean            @default(false)
    created_at    DateTime           @default(now())
    user          AuthUser           @relation(fields: [userid], references: [id])
    notification  Post_Notification? @relation(fields: [post_NotificationNotificationid], references: [notificationid])

    post_NotificationNotificationid String?

    @@unique([created_at, nofiy_user_id])
    @@index(fields: [userid])
    @@map("notify_user")
}
