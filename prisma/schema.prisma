// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AuthUser {
    userid           String                               @id @unique @default(cuid())
    username         String
    email            String                               @unique
    profile          UserProfile?
    created_at       DateTime                             @default(now())
    updated_at       DateTime                             @updatedAt
    primary_lang     String
    primary_location Unsupported("geometry(Point, 4326)")
    theme            String
    posts            Post[]
    comments         Comment[]
    geo_posts        Geo_Post[]
    geo_comments     Geo_Comment[]
    likes            Like[]
    follows          AuthUser[]                           @relation("UserFollows")
    followers        AuthUser[]                           @relation("UserFollows")
    blocked_users    AuthUser[]                           @relation("UserBlocks")
    blocked_by       AuthUser[]                           @relation("UserBlocks")
    notifications    NotifyUser[]
    chats            Chat[]
    Geo_Like         Geo_Like[]
    Message          Message[]

    auth_session AuthSession[]
    auth_key     AuthKey[]

    @@index(fields: [userid], type: Hash)
    @@map("user")
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [userid], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser @relation(references: [userid], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model UserProfile {
    profileid String   @id @default(cuid())
    userid    String   @unique
    bio       String
    work      String
    education String
    avatar    String
    cover     String
    user      AuthUser @relation(fields: [userid], references: [userid])

    @@index(fields: [userid], type: Hash)
    @@map("user_profile")
}

model Post {
    postid            String              @id @default(cuid())
    userid            String
    created_at        DateTime            @default(now())
    updated_at        DateTime            @updatedAt
    title             String
    content           String
    meta              Json
    likes             Like[]
    comments          Comment[]
    user              AuthUser            @relation(fields: [userid], references: [userid])
    Geo_Comment       Geo_Comment[]
    Geo_Like          Geo_Like[]
    Post_Notification Post_Notification[]

    @@index(fields: [userid], type: Hash)
    @@index(fields: [postid])
    @@map("post")
}

model Comment {
    commentid      String     @id @default(cuid())
    userid         String
    postid         String
    created_at     DateTime   @default(now())
    updated_at     DateTime   @updatedAt
    title          String
    content        String
    meta           Json
    likes          Geo_Like[]
    user           AuthUser   @relation(fields: [userid], references: [userid])
    post           Post       @relation(fields: [postid], references: [postid])
    Geo_Post       Geo_Post?  @relation(fields: [geo_PostPostid], references: [postid])
    geo_PostPostid String?
    Like           Like[]

    @@index(fields: [commentid, postid, userid])
    @@map("comment")
}

model Geo_Post {
    postid       String                               @id @default(cuid())
    userid       String
    type         String
    geo_location Unsupported("geometry(Point, 4326)")
    created_at   DateTime                             @default(now())
    updated_at   DateTime                             @updatedAt
    title        String
    content      String
    meta         Json
    likes        Geo_Like[]
    comments     Comment[]
    user         AuthUser                             @relation(fields: [userid], references: [userid])

    @@index([geo_location], name: "location_idx", type: Gist)
    @@index(fields: [userid], type: Hash)
    @@map("geo_post")
}

model Geo_Comment {
    geo_commentid String                               @id @default(cuid())
    userid        String
    postid        String
    geo_location  Unsupported("geometry(Point, 4326)")
    created_at    DateTime                             @default(now())
    updated_at    DateTime                             @updatedAt
    title         String
    content       String
    meta          Json
    likes         Like[]
    user          AuthUser                             @relation(fields: [userid], references: [userid])
    post          Post                                 @relation(fields: [postid], references: [postid])

    @@index(fields: [postid, userid])
    @@map("geo_comment")
}

model Like {
    likeid        String       @id @default(cuid())
    userid        String
    postid        String?
    commentid     String?
    geo_commentid String?
    user          AuthUser     @relation(fields: [userid], references: [userid])
    post          Post?        @relation(fields: [postid], references: [postid])
    comment       Comment?     @relation(fields: [commentid], references: [commentid])
    geo_comment   Geo_Comment? @relation(fields: [geo_commentid], references: [geo_commentid])

    @@index(fields: [likeid, postid, userid, commentid])
    @@map("like")
}

model Geo_Like {
    likeid         String    @id @default(cuid())
    userid         String
    postid         String?
    commentid      String?
    user           AuthUser  @relation(fields: [userid], references: [userid])
    post           Post?     @relation(fields: [postid], references: [postid])
    comment        Comment?  @relation(fields: [commentid], references: [commentid])
    Geo_Post       Geo_Post? @relation(fields: [geo_PostPostid], references: [postid])
    geo_PostPostid String?

    @@index(fields: [likeid, postid, userid, commentid])
    @@map("geo_like")
}

model Chat {
    chatid      String     @id @default(cuid())
    chatmembers AuthUser[]
    userchatid  String
    created_at  DateTime   @default(now())
    updated_at  DateTime   @updatedAt
    messages    Message[]

    @@index(fields: [userchatid])
    @@map("chat")
}

model Message {
    messageid  String   @id @default(cuid())
    chatid     String
    userid     String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    content    String
    chat       Chat[]
    user       AuthUser @relation(fields: [userid], references: [userid])

    @@index(fields: [messageid, chatid, userid])
    @@map("message")
}

model Post_Notification {
    notificationid String       @id @default(cuid())
    postid         String
    content        String
    post           Post         @relation(fields: [postid], references: [postid])
    notify_user    NotifyUser[]

    @@index(fields: [notificationid])
    @@map("post_notification")
}

model NotifyUser {
    nofiy_user_id String             @id @default(cuid())
    userid        String
    content       String
    created_at    DateTime           @default(now())
    user          AuthUser           @relation(fields: [userid], references: [userid])
    notification  Post_Notification? @relation(fields: [post_NotificationNotificationid], references: [notificationid])

    post_NotificationNotificationid String?

    @@index(fields: [userid])
    @@map("notify_user")
}
